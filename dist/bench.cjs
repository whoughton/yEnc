"use strict";const y=require("tinybench"),l=new Set([0,10,13,61]),h=function(e){if(typeof e!="string")throw new TypeError("yEnc.encode expects a string input");if(typeof TextEncoder<"u")return new TextEncoder().encode(e);{const n=[];for(const t of e){const r=t.charCodeAt(0);if(r<=127)n.push(r);else{const o=encodeURIComponent(t).substr(1).split("%");for(const d of o)d.length>0&&n.push(parseInt(d,16))}}return new Uint8Array(n)}},w=function(e){if(!(e instanceof Uint8Array))throw new TypeError("yEnc.decodeBytes expects a Uint8Array");if(typeof TextDecoder<"u")return new TextDecoder("utf-8").decode(e);{let n="";for(const t of e)t<=127?t===37?n+="%25":n+=String.fromCharCode(t):n+=`%${t.toString(16).toUpperCase()}`;try{return decodeURIComponent(n)}catch{throw new URIError("Malformed percent-encoding in yEnc.fromBytes")}}},E=function(e){if(typeof e!="string")throw new TypeError("yEnc.encode expects a string input");return s(h(e))},s=function(e){if(!(e instanceof Uint8Array))throw new TypeError("yEnc.encodeBytes expects a Uint8Array");let n="";for(const t of e){const r=(t+42)%256;if(!l.has(r))n+=String.fromCharCode(r);else{const o=(r+64)%256;n+=`=${String.fromCharCode(o)}`}}return n},g=function(e){if(typeof e!="string")throw new TypeError("yEnc.decode expects a string input");return w(f(e))},f=function(e){if(typeof e!="string")throw new TypeError("yEnc.decodeBytes expects a string input");const n=[];let t=!1;for(const r of e){const o=r.charCodeAt(0);if(!(o===13||o===10)){if(o===61&&!t){t=!0;continue}if(t){t=!1;const d=o-64;d<42&&d>=0?n.push(d+214):n.push(d-42)}else o<42&&o>=0?n.push(o+214):n.push(o-42)}}return new Uint8Array(n)},c={encode:E,encodeBytes:s,decode:g,decodeBytes:f};typeof module<"u"&&module.exports&&(module.exports=c);typeof define<"u"&&define.amd&&define([],function(){return c});typeof window<"u"&&(window.yEnc=c);const a="Hello, World! 123 @#$%^&*()",p="Hello 世界 🌍 emoji 🚀",u="A".repeat(1e4)+"世界".repeat(1e3),x=c.encode(a),m=c.encode(p),C=c.encode(u),i=new y.Bench({time:100});i.add("encode (ascii)",()=>{c.encode(a)}).add("decode (ascii)",()=>{c.decode(x)}).add("encode (unicode)",()=>{c.encode(p)}).add("decode (unicode)",()=>{c.decode(m)}).add("encode (large)",()=>{c.encode(u)}).add("decode (large)",()=>{c.decode(C)});(async()=>(await i.run(),console.table(i.table())))();
